import{capitalize as e,truncateString as t,applyMarkdown as a,fileToDataUrl as n}from"./utilities.js";function createSkyDashUI(){let e=`
	<div class="skydash-menu">
		<button data-sky-open="collections">C</button>
		<button data-sky-open="media">M</button>
		<button
			data-sky-open="dashboard"
		  	style="border-radius: 50%; width: 30px; height: 30px; padding: 0; border: 1px; overflow: hidden; display: flex; justify-content: center; align-items: center;">
		  <img src="/assets/headshot.jpg" alt="headshot" style="width: 100%; height: auto; pointer-events: none;">
		</button>
	</div>

	<dialog data-sky-dialog="dashboard" id="dashboardDialog" class="dashboard-dialog"></dialog>
	<dialog data-sky-dialog="collections" id="collectionsDialog" class="collections-dialog"></dialog>
	<dialog data-sky-dialog="media" id="mediaDialog" class="media-dialog"></dialog>
	<dialog data-sky-dialog="edit" id="editDialog" class="edit-dialog"></dialog>
	<dialog data-sky-dialog="components" id="componentsDialog" class="components-dialog"></dialog>
	`;document.body.insertAdjacentHTML("beforeend",e)}function injectSkyDashStyles(){let e=`
    	button {
    		height: fit-content;
    		width: fit-content;
    	}
        /* Dialog */
    	dialog {
			border: 2px solid #ccc;
			border-radius: 10px;
			padding: 20px;
			box-shadow: 0 4px 6px rgba(0,0,0,0.1);
			background-color: #F6F6F6;
			overflow-y: auto;
			transition: width 0.5s ease-in-out, height 0.5s ease-in-out;
			z-index: 10000;
    	}

    	dialog::backdrop {
          background-color: rgb(0 0 0 / 0%);
        }

        dialog[open]::backdrop {
          background-color: rgb(0 0 0 / 0%);
        }

        #collectionsDialog, #componentsDialog, #editDialog {
            position: fixed;
            bottom: 6rem;
            right: 1rem;
            margin-right: 0;
            min-height: 30%;
            max-height: 70%;
            width: 30%;
        }

        #dashboardDialog, #mediaDialog {
			position: fixed;
			width: calc(100% - 4rem);
			height: calc(100% - 4rem);
			top: 50%;
			left: 50%;
			transform: translate(-50%, -50%);
			z-index: 10000;
		}

		#mediaGallery {
			display: flex;
			gap: 1rem;
		}

        /* SkyDash Menu */
        .skydash-menu {
            position: fixed;
            bottom: 1rem;
            right: 1rem;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 1rem;
            border: 2px solid #ccc;
			border-radius: 10px;
			padding: 20px;
			box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            background-color: #F6F6F6;
        }

        /* Editables */
		.editable-wrapper {
		    position: relative;
		    display: block;
		    /* border: none;
		    border-color: transparent; */
		    border-radius: 0 5px 5px 5px;
		    transition: 0.25s;
		    width: fit-content;
		    height: fit-content;
		}

		.editable-wrapper:hover {
			/* border: #7F557B 1px solid; */
			box-shadow: inset 0 0 0 1px #7F557B;
		}

		.editable-wrapper-open {
		    position: relative;
		    display: block;
		    /* border: none;
		    border-color: transparent; */
		    border-radius: 0 5px 5px 5px;
		    transition: 0.25s;
		}

		.editable-wrapper-open:hover {
			/* border: #7F557B 1px solid; */
			box-shadow: inset 0 0 0 1px #7F557B;
		}

		.sky-edit-toolbar {
		    position: absolute;
		    top: -33px;
		    left: -1px;
		    display: none;
		    background-color: none;
			border-top: 1px solid #7F557B;
			border-right: 1px solid #7F557B;
			border-left: 1px solid #7F557B;
			border-bottom: 1px solid transparent;
		    border-radius: 5px 5px 0 0;
		    padding: 5px;
		    white-space: nowrap; /* Keeps the toolbar in a single line */
		}

		.sky-edit-toolbar-inside {
		    position: absolute;
		    top: 0px;
		    left: -1px;
		    display: none;
		    background-color: #7F557B;
		    border: 1px solid #7F557B;
		    border-radius: 0 0 5px 0;
		    padding: 5px;
		    white-space: nowrap; /* Keeps the toolbar in a single line */
		}

		.sky-edit-button {
		}

		.editable-wrapper:hover .sky-edit-toolbar, .editable-wrapper-open:hover .sky-edit-toolbar-inside {
			display: block;
		}

		#editForm {
			display: flex;
			flex-direction: column;
		}

		[contenteditable="true"] {
		    outline: none; /* Removes the default focus outline */
		}

		[contenteditable="true"]:focus {
		    background: none; /* Example: subtle background color change to indicate focus/edit mode */
		}
    `,t=document.createElement("style");t.type="text/css",t.textContent=e.trim(),document.head.appendChild(t)}async function openFieldEditor(e){let t=e.getAttribute("data-sky-field"),a=t.split(".");if(3!==a.length){console.error("Invalid data-sky-field format");return}let[n,r,o]=a;try{let i=await readCollections(),l=i.find(e=>e.pluralId===n);if(!l){console.error("Collection not found");return}let s=l.instances.find(e=>e.id===r);if(!s){console.error("Instance not found");return}let d=document.querySelector('[data-sky-dialog="collections"]'),c=renderInstanceEditForm(l,s);d.innerHTML=c,d.show(),function e(t){let a=document.querySelector(`[name="${t}"]`);a&&a.focus()}(o)}catch(u){console.error("Error opening field editor:",u)}}function openComponentEditor(e){let t=document.querySelector('[data-sky-dialog="components"]'),a=renderComponentsDialog();t.innerHTML=a,t.show()}async function changeImage(e){return new Promise(async(t,a)=>{let n=document.querySelector('[data-sky-dialog="media"]');n.show();let r=renderMediaDialog();n.innerHTML=r,await renderMediaItems();let o=async r=>{if(r.target.classList.contains("media-item")){let i=r.target.src,l=document.querySelector(`[data-sky-id="${e}"]`),s=l.querySelector("img");s?(s.src=i,await updateEditable(e,s.outerHTML),t(i)):a("Editable element not found."),n.removeEventListener("click",o),n.close()}};n.addEventListener("click",o)})}function editEditable(e,t,a){e.getAttribute("data-sky-index"),e.getAttribute("data-sky-id");let n=t.getAttribute("data-sky-type"),r=e.querySelector("[data-sky-field]");e.querySelector("[data-sky-element]"),t.getAttribute("data-sky-action"),"field"===n&&openFieldEditor(r),"component"===n&&openComponentEditor()}function inferEditableType(e){switch(e.toUpperCase()){case"IMG":return"image";case"P":case"SPAN":return"text";case"DIV":case"SECTION":return"block";default:return"unknown"}}function wrapEditableElement(e,t){let a=document.createElement("div"),n;if(e.getAttribute("data-sky-field"))a.className="editable-wrapper",n=renderEditableToolbar("field",t);else if(e.getAttribute("data-sky-component"))a.className="editable-wrapper-open",n=renderEditableToolbar("component",t);else{a.className="editable-wrapper",a.setAttribute("data-sky-id",t);let r=inferEditableType(e.tagName);n=renderEditableToolbar(r,t)}e.parentNode.insertBefore(a,e),a.appendChild(e);let o=document.createElement("div");o.innerHTML=n,Array.from(o.children).forEach(e=>{a.appendChild(e)})}function renderEditableToolbar(e,t){switch(e){case"image":return`<div class="sky-edit-toolbar">
            		IMAGE
	                <button class="sky-edit-button" data-sky-id="${t}" data-sky-type="${e}" data-sky-action="change-image">Change</button>
                </div>`;case"text":return`
            	<div class="sky-edit-toolbar">
	                TEXT
	                <button class="sky-edit-button" data-sky-id="${t}" data-sky-type="${e}" data-sky-action="bold">B</button>
	                <button class="sky-edit-button" data-sky-id="${t}" data-sky-type="${e}" data-sky-action="italicize">I</button>
	                <button class="sky-edit-button" data-sky-id="${t}" data-sky-type="${e}" data-sky-action="underline">U</button>
	                <button class="sky-edit-button" data-sky-id="${t}" data-sky-type="${e}" data-sky-action="link">Link</button>
                </div>
            `;case"block":return`<div class="sky-edit-toolbar">
	                BLOCK
	                <button class="sky-edit-button" data-sky-id="${t}" data-sky-type="${e}" data-sky-action="bold">B</button>
	                <button class="sky-edit-button" data-sky-id="${t}" data-sky-type="${e}" data-sky-action="italicize">I</button>
	                <button class="sky-edit-button" data-sky-id="${t}" data-sky-type="${e}" data-sky-action="underline">U</button>
	                <button class="sky-edit-button" data-sky-id="${t}" data-sky-type="${e}" data-sky-action="link">Link</button>
                </div>`;case"field":return`<div class="sky-edit-toolbar">
            		FIELD
	                <button class="sky-edit-button" data-sky-type="${e}" data-sky-action="field">Edit</button>
                </div>`;case"component":return`<div class="sky-edit-toolbar-inside">
            		COMPONENT
	                <button class="sky-edit-button" data-sky-type="${e}" data-sky-action="component">Edit</button>
                </div>`;default:return`<div class="sky-edit-toolbar">
	                <button class="sky-edit-button" data-sky-id="${t}" data-sky-type="${e}" data-sky-action="edit">Edit</button>
                </div>`}}function renderEditableEditForm(){return`<form id="editForm">
			<textarea id="editInput" name="content"></textarea>
			<input type="hidden" id="editIndex" name="index">
			<button type="submit">Save Changes</button>
			<button type="button" onclick="document.getElementById('editDialog').close();">Cancel</button>
		</form>`}function renderDashboardDialog(e){return`
		<div style="display: flex; justify-content: space-between; width: 100%;">
	    	<h1>Dashboard</h1>
	    	<div style="display: flex; gap: 1rem;">
			    <button data-sky-close="dashboard">Close</button>
		    </div>
		</div>
		<div>
			<div>
				<div style="display: flex; gap: 1rem; justify-content: start; align-items: center;">
					<h2>Users</h2>
					<!-- <button class="create-user-button">Create User</button> -->
				</div>
				<div class="sky-users-preview" style="display: flex; gap: 1rem;"></div>
			</div>
			<div>
				<div style="display: flex; gap: 1rem; justify-content: start; align-items: center;">
					<h2>Roles</h2>
					<button class="create-role-button">Create Role</button>
				</div>
				<div class="sky-roles-preview" style="display: flex; gap: 1rem;"></div>
			</div>
			<div>
				<h2>Collections</h2>
				<div class="sky-collections-preview" style="display: flex; gap: 1rem;"></div>
			</div>
		</div>
	`}function renderMediaDialog(e){return`
    <div style="display: flex; flex-direction: column; gap: 1rem; width: 100%;">
    	<div style="display: flex; justify-content: space-between;">
	    	<h1>Media Library</h1>
	    	<div style="display: flex; gap: 1rem;">
			    <input type="file" id="media-upload-input" multiple accept="image/*,video/*,application/pdf" style="display:none;">
			    <button id="openFileUpload">Upload Image</button>
			    <button data-sky-close="media">Close</button>
		    </div>
		</div>

	    <div id="mediaGallery"></div>
    </div>
    `}function renderComponentsDialog(e){return`
		<button data-sky-close="components">Close</button>
	`}function renderEditDialog(e){return`
		<button data-sky-close="edit">Cancel</button>
	`}function renderCollectionsDialog(e){return`
		<button data-sky-close="collections">Close</button>
		<button class="expand-dialog-button" data-expanded="false">Expand</button>
		<button onclick="document.querySelector('#form-container').style.display = 'block';">Create Collection</button>
		<div id="form-container" style="display:none;">
			<form
				id="new-collection-form"
				style="display: flex; flex-direction: column; gap: 1rem;">
				<label>
					Plural Name
					<input type="text" name="collectionPlural" placeholder="Plural Name" required>
				</label>
				<label>
					Singular Name
					<input type="text" name="collectionSingular" placeholder="Singular Name" required>
				</label>
				<label>
					Display Name
					<input type="text" name="collectionDisplay" placeholder="Display Name" required>
				</label>
				<div>
					<p>Collection Template</p>
					<button id="addFieldButton">+ Field</button>
				</div>
				<button type="submit">Create Collection</button>
			</form>
		</div>

		${e.length>0?e.map(e=>`
			<div>
				<h2>${e.displayName}</h2>
				<button class="instance-view-button" data-collection-id="${e.id}">View</button>
				<button data-collection-id="${e.id}" class="delete-collection-button">Delete</button>
			</div>
		`).join(""):"<p>No Collections</p>"}
	`}function renderInstances(a,n){let r=a.schema,o=n.map(e=>{let n=r.map(a=>{let n=e[a.name]||"",r=`<div class="${a.type}"><label>${a.name}:</label> <span>${n}</span></div>`;switch(a.type){case"textarea":r=`<div class="${a.type}"><label>${a.name}:</label> <span>${t(n,60)}</span></div>`;break;case"checkbox":n=n?"Yes":"No";break;case"select":case"radio":break;case"color":r=`<div class="${a.type}"><label>${a.name}:</label> <span style="background-color: ${n}; width: 20px; height: 20px; border: 1px solid #000; display: inline-block;"></span> ${n}</div>`;break;case"file":r=`<div class="${a.type}"><label>${a.name}:</label> <span>File uploaded</span></div>`}return r}).join("");return`<div class="instance">${n}
                    <button data-collection-id="${a.id}" data-instance-id="${e.id}" class="edit-instance-button">Edit</button>
                    <button data-collection-id="${a.id}" data-instance-id="${e.id}" class="delete-instance-button">Delete</button>
                </div>`}).join("");return`
		<h1>${a.displayName}</h1>
		<button class="create-instance-button" data-collection-id="${a.id}">+ New ${e(a.singularId)}</button>
		${n.length>0?o:`<p>Add ${e(a.singularId)}</p>`}
	`}function renderNewInstanceForm(t){let a=t.schema,n=a.map(e=>{switch(e.type){case"text":return`<label>${e.name}<input type="text" name="${e.name}" placeholder="${e.name}" required></label>`;case"textarea":return`<label>${e.name}<textarea name="${e.name}" placeholder="${e.name}" required></textarea></label>`;case"number":return`<label>${e.name}<input type="number" name="${e.name}" placeholder="Enter a number" required></label>`;case"email":return`<label>${e.name}<input type="email" name="${e.name}" placeholder="Enter an email" required></label>`;case"date":return`<label>${e.name}<input type="date" name="${e.name}" required></label>`;case"time":return`<label>${e.name}<input type="time" name="${e.name}" required></label>`;case"datetime-local":return`<label>${e.name}<input type="datetime-local" name="${e.name}" required></label>`;case"select":return`<label>${e.name}<select name="${e.name}"><option value="option1">Option 1</option></select></label>`;case"checkbox":return`<label><input type="checkbox" name="${e.name}" value="true"> ${e.name}</label>`;case"radio":return`<fieldset>
                            <legend>${e.name}</legend>
                            <label><input type="radio" name="${e.name}" value="option1"> Option 1</label>
                            <label><input type="radio" name="${e.name}" value="option2"> Option 2</label>
                        </fieldset>`;case"url":return`<label>${e.name}<input type="url" name="${e.name}" placeholder="https://example.com" required></label>`;case"color":return`<label>${e.name}<input type="color" name="${e.name}" required></label>`;case"file":return`<label>${e.name}<input type="file" name="${e.name}" required></label>`;default:return`<p>Unsupported field type: ${e.type}</p>`}}).join("");return`
    <form
        id="new-instance-form"
        style="display: flex; flex-direction: column; gap: 1rem;"
        data-collection-id="${t.id}">
        ${n}
        <button type="submit">Create ${e(t.singularId)}</button>
    </form>
    `}function renderInstanceEditForm(e,t){let a=e.schema,n=a.map(e=>{if(t.hasOwnProperty(e.name)){if("text"===e.type)return`
				<label for="${e.name}">
					${e.name}
					<input type="text" id="${e.name}" name="${e.name}" placeholder="${e.name}" value="${t[e.name]}" required>
				</label>`;if("textarea"===e.type)return`
				<label for="${e.name}">
					${e.name}
					<textarea id="${e.name}" name="${e.name}" placeholder="${e.name}" required>${t[e.name]}</textarea>
				</label>`}}).join("");return`
		<form
			id="edit-instance-form"
			style="display: flex; flex-direction: column; gap: 1rem;"
			data-collection-id="${e.id}"
			data-instance-id="${t.id}"
			>
			${n}
			<button type="submit">Update</button>
		</form>
	`}async function renderMediaItems(){let e=document.getElementById("mediaGallery");e.innerHTML="";let t=await readAllMedia();t.forEach(t=>{let a=document.createElement("div");a.innerHTML=`
            <div>
                <img class="media-item" src="${t.content}" alt="${t.name}" style="max-width: 100px; max-height: 100px;" />
                <p>${t.name}</p>
                <button class="deleteMediaButton" data-media-id="${t.id}">Delete</button>
            </div>
        `,e.appendChild(a)}),document.querySelectorAll(".deleteMediaButton").forEach(e=>{e.addEventListener("click",async function(){let e=this.getAttribute("data-media-id");await deleteMedia(e),await renderMediaItems()})})}function genNewCollectionObject(e){return{id:e.newId,singularId:e.collectionSingular,pluralId:e.collectionPlural,displayName:e.collectionDisplay,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),schema:[],instances:[]}}function genNewEditableObject({id:e,skyKey:t,content:a}){return{id:e,skyKey:t,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),content:a}}function genNewInstanceObject(e){return{id:e.newId,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()}}function genNewUserObject(e){return{id:e.id,did:e.did,name:"Kelly Sattaur",roles:["captain"],favicon:"",createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()}}function genNewRoleObject(e){return{id:e.newId,name:e.name,permissions:e.permissions}}async function openDB(){if(!window.indexedDB)throw console.error("IndexedDB is not supported by this browser."),Error("IndexedDB not supported");return new Promise((e,t)=>{let a=indexedDB.open("SkyDashDatabase",1);a.onerror=e=>{console.error("Database error: ",e.target.error),t(e.target.error)},a.onsuccess=t=>{let a=t.target.result;e(a)},a.onupgradeneeded=e=>{let t=e.target.result;t.objectStoreNames.contains("collections")||t.createObjectStore("collections",{keyPath:"id"}),t.objectStoreNames.contains("mediaLibrary")||t.createObjectStore("mediaLibrary",{keyPath:"id"}),t.objectStoreNames.contains("editables")||t.createObjectStore("editables",{keyPath:"id"}),t.objectStoreNames.contains("users")||t.createObjectStore("users",{keyPath:"id"}),t.objectStoreNames.contains("roles")||t.createObjectStore("roles",{keyPath:"id",autoIncrement:!0})}})}async function createEditable(e){let t=await openDB(),a=t.transaction("editables","readwrite"),n=a.objectStore("editables");return new Promise((t,a)=>{let r=n.add(e);r.onsuccess=()=>t(r.result),r.onerror=e=>a(e.target.error)})}async function readEditable(e){let t=await openDB(),a=t.transaction("editables","readonly"),n=a.objectStore("editables");return new Promise((t,a)=>{let r=n.get(e);r.onsuccess=()=>t(r.result),r.onerror=e=>a(e.target.error)})}async function readEditables(e){let t=await openDB(),a=t.transaction("editables","readonly"),n=a.objectStore("editables"),r=n.getAll();return new Promise((t,a)=>{r.onsuccess=()=>{let a=r.result||[],n=a.filter(t=>t.skyKey===e);t(n)},r.onerror=e=>{console.error("Failed to read all editables from IndexedDB:",e.target.error),a(e.target.error)}})}async function updateEditable(e,t){let a=await openDB(),n=a.transaction("editables","readwrite"),r=n.objectStore("editables"),o=r.get(e);return new Promise((e,a)=>{o.onsuccess=async()=>{let n=o.result;if(n){n.content=t;let i=r.put(n);i.onsuccess=()=>e(i.result),i.onerror=e=>a(e.target.error)}else a(Error("Editable not found"))},o.onerror=e=>a(e.target.error)})}async function deleteEditable(e){let t=await openDB(),a=t.transaction("editables","readwrite"),n=a.objectStore("editables");return new Promise((t,a)=>{let r=n.delete(e);r.onsuccess=()=>t(r.result),r.onerror=e=>a(e.target.error)})}async function initializeEditables(){let e=document.body.getAttribute("data-sky-key"),t=document.querySelectorAll("[data-sky-element]"),a=await readEditables(e);await Promise.all(Array.from(t).map(async(t,n)=>{function r(e){let t=document.createElement("div");return t.innerHTML=e.trim(),t.firstChild}let o=`${e}-${n}`,i=a.find(e=>e.id===o);if(wrapEditableElement(t,o),i)t.outerHTML=i.content;else{let l=genNewEditableObject({id:o,skyKey:e,content:t.outerHTML});await createEditable(l)}}))}async function initializeEditableFields(){let e=document.querySelectorAll("[data-sky-field]");for(let t of(e.forEach((e,t)=>{wrapEditableElement(e,t)}),e)){let a=t.getAttribute("data-sky-field"),n=a.split(".");if(3!==n.length){console.error("Invalid data-sky-field format");return}let[r,o,i]=n;try{let l=await readCollections(),s=l.find(e=>e.pluralId===r);if(!s){console.error("Collection not found");return}let d=s.instances.find(e=>e.id===o);if(!d){console.error("Instance not found");return}t.innerHTML=d[i]}catch(c){console.error("Error opening field editor:",c)}}}async function createCollection(e){let t=await openDB(),a=t.transaction("collections","readwrite"),n=a.objectStore("collections"),r=n.add(e);return new Promise((e,t)=>{r.onsuccess=()=>{e(r.result)},r.onerror=e=>{t(e.target.error)}})}async function readCollections(){let e=await openDB(),t=e.transaction("collections","readonly"),a=t.objectStore("collections"),n=a.getAll();return new Promise((e,t)=>{n.onsuccess=()=>{e(n.result)},n.onerror=e=>{t(e.target.error)}})}async function readCollection(e){let t=await openDB(),a=t.transaction("collections","readonly"),n=a.objectStore("collections"),r=n.get(e);return new Promise((e,t)=>{r.onsuccess=()=>e(r.result),r.onerror=e=>t(e.target.error)})}async function updateCollection(e,t){let a=await openDB(),n=a.transaction("collections","readwrite"),r=n.objectStore("collections"),o=r.get(e);o.onsuccess=async()=>{let e=o.result;if(!e){console.error("Collection not found");return}t(e);let a=r.put(e);a.onsuccess=()=>{console.log("Collection updated successfully")},a.onerror=()=>{console.error("Failed to update collection")}},o.onerror=()=>{console.error("Failed to retrieve collection")},await n.done}async function deleteCollection(e){let t=await openDB(),a=t.transaction("collections","readwrite"),n=a.objectStore("collections"),r=n.delete(e);return new Promise((e,t)=>{r.onsuccess=()=>e(r.result),r.onerror=e=>t(e.target.error)})}async function createInstance(e,t){updateCollection(e,e=>{e.instances.push(t)}).then(()=>{console.log("Instance created successfully")}).catch(e=>{console.error("Error creating instance:",e)})}async function readInstances(e){let t=await readCollection(e);return t?t.instances:[]}async function readInstance(e,t){let a=await openDB(),n=a.transaction("collections","readonly"),r=n.objectStore("collections"),o=r.get(e);return new Promise((e,a)=>{o.onsuccess=()=>{let a=o.result;if(!a){e(void 0);return}let n=a.instances.find(e=>e.id===t);e(n)},o.onerror=()=>a(o.error)})}async function updateInstance(e,t,a){updateCollection(t,t=>{let n=t.instances.findIndex(e=>e.id===a);if(-1===n){console.error("Instance not found");return}t.instances[n]={...t.instances[n],...e}}).then(()=>{console.log("Instance updated successfully")}).catch(e=>{console.error("Error updating instance:",e)})}async function deleteInstance(e,t){updateCollection(e,e=>{let a=e.instances.filter(e=>e.id!==t);e.instances=a}).then(()=>{console.log("Instance deleted successfully")}).catch(e=>{console.error("Error deleting instance:",e)})}async function addMedia(e){let t=await openDB(),a=t.transaction("mediaLibrary","readwrite"),n=a.objectStore("mediaLibrary"),r=n.add(e);return new Promise((e,t)=>{r.onsuccess=()=>e(r.result),r.onerror=e=>t(e.target.error)})}async function readAllMedia(){let e=await openDB(),t=e.transaction("mediaLibrary","readonly"),a=t.objectStore("mediaLibrary"),n=a.getAll();return new Promise((e,t)=>{n.onsuccess=()=>{e(n.result)},n.onerror=()=>{t(n.error)}})}async function readMedia(e){let t=await openDB(),a=t.transaction("mediaLibrary","readonly"),n=a.objectStore("mediaLibrary"),r=await n.get(e);return t.close(),r}async function deleteMedia(e){let t=await openDB(),a=t.transaction("mediaLibrary","readwrite"),n=a.objectStore("mediaLibrary"),r=n.delete(e);return new Promise((e,t)=>{r.onsuccess=()=>e(),r.onerror=e=>t(e.target.error)})}async function createUser(e){let t=await openDB(),a=t.transaction("users","readwrite"),n=a.objectStore("users");return new Promise((t,a)=>{let r=n.add(e);r.onsuccess=()=>t(r.result),r.onerror=e=>a(e.target.error)})}async function readUsers(){let e=await openDB(),t=e.transaction("users","readonly"),a=t.objectStore("users");return new Promise((e,t)=>{let n=a.getAll();n.onsuccess=()=>e(n.result),n.onerror=e=>t(e.target.error)})}async function readUser(e){let t=await openDB(),a=t.transaction("users","readonly"),n=a.objectStore("users");return new Promise((t,a)=>{let r=n.get(e);r.onsuccess=()=>t(r.result),r.onerror=e=>a(e.target.error)})}async function updateUser(e){let t=await openDB(),a=t.transaction("users","readwrite"),n=a.objectStore("users");return new Promise((t,a)=>{let r=n.put(e);r.onsuccess=()=>t(r.result),r.onerror=e=>a(e.target.error)})}async function deleteUser(e){let t=await openDB(),a=t.transaction("users","readwrite"),n=a.objectStore("users");return new Promise((t,a)=>{let r=n.delete(e);r.onsuccess=()=>t(r.result),r.onerror=e=>a(e.target.error)})}let permissionsList=["CREATE_COLLECTION","READ_COLLECTION","UPDATE_COLLECTION","DELETE_COLLECTION","CREATE_INSTANCE","READ_INSTANCE","UPDATE_INSTANCE","DELETE_INSTANCE","UPLOAD_MEDIA","DELETE_MEDIA","READ_MEDIA","EDIT_CONTENT","PUBLISH_CONTENT","CREATE_USER","DELETE_USER","UPDATE_USER_PERMISSIONS"];function isValidPermission(e){return permissionsList.includes(e)}async function canUserPerformOperation(e,t){let a=e.roles,n=await Promise.all(a.map(async e=>{let t=await readRoleByName(e);return t.permissions})),r=[...new Set(n.flat())];return r.includes(t)}async function createRole(e){let t=await openDB(),a=t.transaction("roles","readwrite"),n=a.objectStore("roles");return new Promise((t,a)=>{let r=n.add(e);r.onsuccess=()=>t(r.result),r.onerror=e=>a(e.target.error)})}async function readRoles(){let e=await openDB(),t=e.transaction("roles","readonly"),a=t.objectStore("roles");return new Promise((e,t)=>{let n=a.getAll();n.onsuccess=()=>e(n.result),n.onerror=e=>t(e.target.error)})}async function readRole(e){let t=await openDB(),a=t.transaction("roles","readonly"),n=a.objectStore("roles");return new Promise((t,a)=>{let r=n.get(e);r.onsuccess=()=>t(r.result),r.onerror=e=>a(e.target.error)})}async function readRoleByName(e){let t=await openDB(),a=t.transaction("roles","readonly"),n=a.objectStore("roles"),r=await new Promise((e,t)=>{let a=n.getAll();a.onsuccess=()=>e(a.result),a.onerror=e=>t(e.target.error)});if(Array.isArray(r)){let o=r.find(t=>t.name===e);return t.close(),o}console.error("Expected an array of roles, received:",r),t.close()}async function updateRole(e,t){let a=await openDB(),n=a.transaction("roles","readwrite"),r=n.objectStore("roles"),o=await r.get(e),i={...o,...t},l=await r.put(i);return console.log("Role updated",l),l}async function deleteRole(e){let t=await openDB(),a=t.transaction("roles","readwrite"),n=a.objectStore("roles");return new Promise((t,a)=>{let r=n.delete(e);r.onsuccess=()=>t(r.result),r.onerror=e=>a(e.target.error)})}function setCurrentUser(e){localStorage.setItem("currentUser",e)}function getCurrentUser(){return localStorage.getItem("currentUser")}function clearCurrentUser(){localStorage.removeItem("currentUser")}async function generateKeyPair(){try{let e=await window.crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);return e}catch(t){console.error("Error generating key pair:",t)}}function base58Encode(e){return"MockBase58"+btoa(String.fromCharCode.apply(null,new Uint8Array(e)))}async function exportAndEncodePublicKey(e){try{let t=await window.crypto.subtle.exportKey("raw",e.publicKey),a=base58Encode(t);return a}catch(n){console.error("Error exporting or encoding public key:",n)}}function formDidKey(e){return`did:key:${e}`}async function registerUser(){let e=await generateKeyPair(),t=await exportAndEncodePublicKey(e),a=formDidKey(t),n=crypto.randomUUID();setCurrentUser(n);let r=genNewUserObject({id:n,did:a});await createUser(r)}async function gatherDataFromIDB(){let e={collections:[],editables:[],mediaLibrary:[],users:[],rbac:[]},t=await openDB("YourDatabaseName",1);return e.collections=await t.getAllFromStore("collections"),e.editables=await t.getAllFromStore("editables"),e.mediaLibrary=await t.getAllFromStore("mediaLibrary"),e.users=await t.getAllFromStore("users"),e.rbac=await t.getAllFromStore("rbac"),t.close(),e}document.addEventListener("DOMContentLoaded",async()=>{createSkyDashUI(),injectSkyDashStyles();let e=document.querySelector('[data-sky-dialog="dashboard"]'),t=document.querySelector('[data-sky-dialog="collections"]'),r=document.querySelector('[data-sky-dialog="components"]'),o=document.querySelector('[data-sky-dialog="media"]'),i=document.querySelector('[data-sky-dialog="edit"'),l=document.body.getAttribute("data-sky-key");document.querySelectorAll("[data-sky-element]"),document.querySelectorAll("[data-sky-field]"),await initializeEditables(),await initializeEditableFields();let s=null,d=null,c=await readRoles(),u=c.length;if(0===u){let p={id:crypto.randomUUID(),name:"captain",permissions:["EDIT_CONTENT"]};await createRole(p)}getCurrentUser()||await registerUser();let b=await readUser(getCurrentUser()),y=await canUserPerformOperation(b,"EDIT_CONTENT");y?console.log("Hello Captain! Welcome Back!"):console.log("Hello Crewmember! Welcome Back!"),document.body.addEventListener("click",async n=>{function c(e,t){let a=new MutationObserver((a,n)=>{for(let r of a)("childList"===r.type||"characterData"===r.type||"attributes"===r.type)&&(console.log(`Mutation observed: ${r.type}`),updateEditable(t,e.outerHTML).catch(console.error))});return a.observe(e,{attributes:!0,childList:!0,subtree:!0,characterData:!0}),a}function u(e){if(!e.classList.contains("is-editing")){let t=e.closest(".editable-wrapper, .editable-wrapper-open"),a=t.dataset.skyId;e.contentEditable=!0,e.classList.add("is-editing"),s=e,d=c(e,a)}}function p(e){if(e&&e.classList.contains("is-editing")){let t=e.closest(".editable-wrapper, .editable-wrapper-open"),a=t.dataset.skyId;e.contentEditable=!1,e.classList.remove("is-editing"),updateEditable(a,e.outerHTML),d&&(d.disconnect(),d=null),s=null}}let b=n.target.closest("[data-sky-element]");if(b?(s&&s!==b&&p(s),u(b)):s&&!s.contains(n.target)&&p(s),n.target.matches(".create-user-button")){await registerUser();let y=await readUsers(),m=y.map(e=>`
				<div class="sky-badge"
					style="background: linear-gradient(45deg, red, blue); width: 50%; height: 250px; color: white; padding: 0.5rem;
				    border-radius: 10px;
				    margin: 0.5rem 0;
				    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1),
				                0 6px 20px rgba(0, 0, 0, 0.1);
				    transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;"
				>
					<h2>SkyBadge</h2>
					<p>${e.name}</p>
					<div>
						${e.roles.map(e=>`<p>${e}</p>`).join("")}
					</div>
					<button class="edit-user-button" data-sky-id="${e.id}">Edit User</button>
					<button class="delete-user-button" data-sky-id="${e.id}">Delete User</button>
				</div>`).join(""),g=document.querySelector(".sky-users-preview");g.innerHTML=m;let f=await readCollections(),w=f.map(e=>`<div style="background: gray; color: white; width: 10%;
				    padding: 0.5rem;
				    border-radius: 10px;
				    margin: 0.5rem 0;">
					<p>${e.displayName}</p>
					<p>${e.instances.length}</p>
				</div>`).join(""),h=document.querySelector(".sky-collections-preview");h.innerHTML=w}if(n.target.matches(".edit-user-button")){let k=n.target.dataset.skyId,$=await readUser(k);e.innerHTML=`
	    	<div style="display: flex; justify-content: space-between; width: 100%;">
		    	<h1>Dashboard</h1>
		    	<div style="display: flex; gap: 1rem;">
				    <button data-sky-close="dashboard">Close</button>
			    </div>
			</div>
			<div>
				<form>
					<input type="text" name="role" value="${$.roles}">
				</form>
			</div>`}if(n.target.matches(".delete-user-button")){let v=n.target.dataset.skyId;await deleteUser(v);let x=await readUsers(),E=x.map(e=>`<div class="sky-badge"
					style="background: linear-gradient(45deg, red, blue); width: 50%; height: 250px; color: white; padding: 0.5rem;
				    border-radius: 10px;
				    margin: 0.5rem 0;
				    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1),
				                0 6px 20px rgba(0, 0, 0, 0.1);
				    transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;"
				>
					<h2>SkyBadge</h2>
					<p>${e.name}</p>
					<div>
						${e.roles.map(e=>`<p>${e}</p>`).join("")}
					</div>
					<button class="edit-user-button" data-sky-id="${e.id}">Edit User</button>
					<button class="delete-user-button" data-sky-id="${e.id}">Delete User</button>
				</div>`).join(""),D=document.querySelector(".sky-users-preview");D.innerHTML=E}if(n.target.matches(".create-role-button")){let S={id:crypto.randomUUID(),name:"editor",permissions:["EDIT_CONTENT"]};await createRole(S);let I=await readRoles(),C=I.map(e=>`<div style="background: gray; color: white; width: 10%;
					    padding: 0.5rem;
					    border-radius: 10px;
					    margin: 0.5rem 0;">
						<p>${e.name}</p>
					<button class="edit-role-button" data-sky-id="${e.id}">Edit Role</button>
					<button class="delete-role-button" data-sky-id="${e.id}">Delete Role</button>
				</div>`).join(""),L=document.querySelector(".sky-roles-preview");L.innerHTML=C}if(n.target.matches(".delete-role-button")){let T=n.target.dataset.skyId;await deleteRole(T);let _=await readRoles(),A=_.map(e=>`<div style="background: gray; color: white; width: 10%;
					    padding: 0.5rem;
					    border-radius: 10px;
					    margin: 0.5rem 0;">
						<p>${e.name}</p>
					<button class="edit-role-button" data-sky-id="${e.id}">Edit Role</button>
					<button class="delete-role-button" data-sky-id="${e.id}">Delete Role</button>
				</div>`).join(""),j=document.querySelector(".sky-roles-preview");j.innerHTML=A}if(n.target.matches("button[data-sky-action]")){n.preventDefault();let N=n.target.getAttribute("data-sky-action");if("change-image"===N)try{let B=n.target.dataset.skyId;await changeImage(B)}catch(M){console.log(M)}else if("link"===N){let U=document.createElement("div");U.style="position: absolute; top: 0; left: 0;",U.innerHTML=`
			            <input type="text" id="linkInput" placeholder="Enter web address">
			            <button id="confirmLink">OK</button>
			        `;let O=n.target.closest(".editable-wrapper");O.appendChild(U),document.getElementById("linkInput").focus();let F=await new Promise(e=>{document.getElementById("confirmLink").addEventListener("click",()=>{let t=document.getElementById("linkInput"),a=t.value.trim();U.remove(),e(a)})});a(N,F)}else a(N)}if(n.target.matches(".sky-edit-button")){let q=n.target.closest(".editable-wrapper , .editable-wrapper-open"),H=n.target;editEditable(q,H,l)}if(n.target.matches(".expand-dialog-button")){let R=n.target.closest("dialog"),P="true"===n.target.dataset.expanded;R&&(P?(R.removeAttribute("style"),n.target.textContent="Expand"):(R.style.width="calc(100% - 4rem)",R.style.height="calc(100% - 4rem)",R.style.bottom="auto",R.style.right="auto",R.style.top="50%",R.style.left="50%",R.style.transform="translate(-50%, -50%)",R.style.margin="auto",R.style.minHeight="10%",R.style.maxHeight="inherit",n.target.textContent="Shrink"),n.target.dataset.expanded=!P)}if(n.target.matches('[data-sky-open="dashboard"]')){document.querySelectorAll("[data-sky-dialog]").forEach(e=>{e.dataset.skyDialog!==n.target.dataset.skyOpen&&e.close()}),e.show();let K=renderDashboardDialog();e.innerHTML=K;let z=await readUsers(),G=z.map(e=>`<div class="sky-badge"
					style="background: linear-gradient(45deg, red, blue); width: 50%; height: 250px; color: white; padding: 0.5rem;
				    border-radius: 10px;
				    margin: 0.5rem 0;
				    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1),
				                0 6px 20px rgba(0, 0, 0, 0.1);
				    transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;"
				>
					<h2>SkyBadge</h2>
					<p>${e.name}</p>
					<div>
						${e.roles.map(e=>`<p>${e}</p>`).join("")}
					</div>
					<button class="edit-user-button" data-sky-id="${e.id}">Edit User</button>
					<button class="delete-user-button" data-sky-id="${e.id}">Delete User</button>
				</div>`).join(""),V=document.querySelector(".sky-users-preview");V.innerHTML=G;let W=await readCollections(),Y=W.map(e=>`<div style="background: gray; color: white; width: 10%;
				    padding: 0.5rem;
				    border-radius: 10px;
				    margin: 0.5rem 0;">
					<p>${e.displayName}</p>
					<p>${e.instances.length}</p>
				</div>`).join(""),X=document.querySelector(".sky-collections-preview");X.innerHTML=Y;let J=await readRoles(),Q=J.map(e=>`<div style="background: gray; color: white; width: 10%;
					    padding: 0.5rem;
					    border-radius: 10px;
					    margin: 0.5rem 0;">
						<p>${e.name}</p>
					<button class="edit-role-button" data-sky-id="${e.id}">Edit Role</button>
					<button class="delete-role-button" data-sky-id="${e.id}">Delete Role</button>
				</div>`).join(""),Z=document.querySelector(".sky-roles-preview");Z.innerHTML=Q}if(n.target.matches('[data-sky-open="collections"]')){document.querySelectorAll("[data-sky-dialog]").forEach(e=>{e.dataset.skyDialog!==n.target.dataset.skyOpen&&e.close()});let ee=await readCollections();t.show();let et=renderCollectionsDialog(ee);t.innerHTML=et}if(n.target.matches('[data-sky-open="media"]')){document.querySelectorAll("[data-sky-dialog]").forEach(e=>{e.dataset.skyDialog!==n.target.dataset.skyOpen&&e.close()}),o.show();let ea=renderMediaDialog();o.innerHTML=ea,await renderMediaItems()}if(n.target.matches('[data-sky-close="dashboard"]')&&e.close(),n.target.matches('[data-sky-close="collections"]')&&t.close(),n.target.matches('[data-sky-close="media"]')&&o.close(),n.target.matches('[data-sky-close="components"]')&&r.close(),n.target.matches('[data-sky-close="edit"]')&&i.close(),n.target.matches(".delete-collection-button")){let en=n.target.getAttribute("data-collection-id");await deleteCollection(en);let er=await readCollections(),eo=renderCollectionsDialog(er);t.innerHTML=eo}if(n.target.matches("#addFieldButton")){n.preventDefault();let ei=Date.now().toString(),el=`
                <div>
                    <label for="name-${ei}">Field Name</label>
                    <input type="text" name="name-${ei}" id="name-${ei}" placeholder="Field Name">

                    <label for="type-${ei}">Field Type</label>
                    <select name="type-${ei}" id="type-${ei}">
                        <option value="text">Text</option>
                        <option value="textarea">Large Text</option>
                        <option value="number">Number</option>
                        <option value="email">Email</option>
                        <option value="date">Date</option>
                        <option value="time">Time</option>
                        <option value="datetime-local">Date & Time</option>
                        <option value="select">Dropdown</option>
                        <option value="checkbox">Checkbox</option>
                        <option value="radio">Radio Button</option>
                        <option value="url">URL</option>
                        <option value="color">Color Picker</option>
                        <option value="file">File Upload</option>
                        <!-- Additional field types can be added here -->
                    </select>
                </div>
            `;n.target.insertAdjacentHTML("beforebegin",el)}if(n.target.matches(".create-instance-button")){let es=n.target.getAttribute("data-collection-id"),ed=await readCollection(es),ec=renderNewInstanceForm(ed);t.innerHTML=ec}if(n.target.matches(".instance-view-button")){let eu=n.target.getAttribute("data-collection-id"),ep=await readCollection(eu),eb=await readInstances(eu),ey=renderInstances(ep,eb);t.innerHTML=ey}if(n.target.matches(".edit-instance-button")){let em=n.target.getAttribute("data-collection-id"),eg=n.target.getAttribute("data-instance-id"),ef=await readCollection(em),ew=await readInstance(em,eg),eh=renderInstanceEditForm(ef,ew);t.innerHTML=eh}if(n.target.matches(".delete-instance-button")){let ek=n.target.getAttribute("data-collection-id"),e$=n.target.getAttribute("data-instance-id");await deleteInstance(ek,e$);let ev=await readCollection(ek),ex=await readInstances(ek),eE=renderInstances(ev,ex);t.innerHTML=eE}n.target.matches("#openFileUpload")&&document.getElementById("media-upload-input").click()}),document.body.addEventListener("submit",async e=>{if(e.target.matches("#new-collection-form")){function a(e){let t=[],a=new Set;for(let[n,r]of e.entries()){let o=n.match(/-(\d+)$/);if(o){let i=o[1];if(a.has(i))continue;a.add(i);let l=e.get(`name-${i}`),s=e.get(`type-${i}`);l&&s&&t.push({name:l,type:s})}}return t}e.preventDefault();let n=new FormData(e.target),r={};for(let[o,i]of(r.newId=Date.now().toString(),n.entries()))r[o]=i;let l=genNewCollectionObject(r);l.schema=a(n),await createCollection(l);let s=await readCollections(),d=renderCollectionsDialog(s);t.innerHTML=d}if(e.target.matches("#new-instance-form")){e.preventDefault();let c=e.target.getAttribute("data-collection-id"),u=new FormData(e.target),p={};for(let[b,y]of(p.newId=Date.now().toString(),u.entries()))p[b]=y;let m=genNewInstanceObject(p),g={...m,...p};await createInstance(c,g);let f=await readCollection(c),w=await readInstances(c),h=renderInstances(f,w);t.innerHTML=h}if(e.target.matches("#edit-instance-form")){e.preventDefault();let k=new FormData(e.target),$={};for(let[v,x]of($.newId=Date.now().toString(),k.entries()))$[v]=x;let E=e.target.getAttribute("data-collection-id"),D=e.target.getAttribute("data-instance-id"),S=await readInstance(E,D);await updateInstance($,E,S.id);let I=await readCollection(E),C=await readInstances(E),L=renderInstances(I,C);t.innerHTML=L}if(e.target.matches("#editForm")){e.preventDefault();let T=e.target.dataset.skyId;if(!T){console.error("No sky ID found on the form");return}let _=new FormData(e.target),A=_.get("newEditable");try{await updateEditable(T,A);let j=document.querySelector(`.editable-wrapper[data-sky-id="${T}"]`);if(!j){console.error("Wrapper not found");return}let N=j.querySelector("[data-sky-element]");N&&(N.innerHTML=A),document.getElementById("editDialog").close()}catch(B){console.error("Error updating editable:",B)}}}),document.body.addEventListener("change",async e=>{if(e.target.matches("#media-upload-input")){let t=Array.from(e.target.files);for(let a of t){let r=await n(a);await addMedia({id:Date.now().toString(),name:a.name,type:a.type,content:r})}await renderMediaItems()}})});